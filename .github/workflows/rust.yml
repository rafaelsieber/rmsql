name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest
    permissions: # <--- MUITO IMPORTANTE: Esta seção deve estar aqui, indentada sob 'build'
      contents: write # Concede permissão de escrita para criar o release e anexar o arquivo
      # Você pode adicionar outras permissões se seu workflow precisar,
      # mas 'contents: write' é o mínimo para releases.
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Release Executable # Mudei o nome para refletir que é um build de release
      run: cargo build --verbose --release # <--- Adicionei --release para otimizar o executável

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Token gerado automaticamente pelo GitHub
      with:
        tag_name: v${{ github.run_number }} # Exemplo de tag: v1, v2, etc. Você pode ajustar.
        release_name: Release v${{ github.run_number }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # URL para upload do asset
        asset_path: target/release/rmsql # Caminho para o seu executável compilado
        asset_name: rmsql # Nome do asset no release
        asset_content_type: application/octet-stream # <--- Tipo de conteúdo genérico para binários
